definitions:
  http.Response:
    properties:
      data: {}
      description:
        type: string
      status:
        type: string
    type: object
  models.UpdatePatch:
    properties:
      data:
        additionalProperties: true
        type: object
      id:
        type: string
    type: object
  order_service.CreateOrder:
    properties:
      product_id:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  order_service.Order:
    properties:
      id:
        type: string
      product_id:
        type: string
      status:
        type: string
      user_first_name:
        type: string
      user_id:
        type: string
      user_last_name:
        type: string
      user_phone_number:
        type: string
    type: object
  user_service.CreateOTP:
    properties:
      phone_number:
        type: string
    type: object
  user_service.CreateUser:
    properties:
      date_of_birth:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  user_service.GetListUserResponse:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/user_service.User'
        type: array
    type: object
  user_service.UpdateUser:
    properties:
      date_of_birth:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  user_service.User:
    properties:
      created_at:
        type: string
      date_of_birth:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /check:
    get:
      consumes:
      - application/json
      description: Verify OTP
      operationId: verify_otp
      parameters:
      - description: otp_code
        in: query
        name: otp_code
        required: true
        type: string
      - description: phone_number
        in: query
        name: phone_number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OTP
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Verify OTP
      tags:
      - OTP
    post:
      consumes:
      - application/json
      description: Create OTP
      operationId: create_otp
      parameters:
      - description: CreateOTPRequestBody
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/user_service.CreateOTP'
      produces:
      - application/json
      responses:
        "200":
          description: OTP
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create OTP
      tags:
      - OTP
  /order:
    post:
      consumes:
      - application/json
      description: Create Order
      operationId: create_order
      parameters:
      - description: CreateOrderRequestBody
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/order_service.CreateOrder'
      produces:
      - application/json
      responses:
        "200":
          description: GetOrderBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/order_service.Order'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create Order
      tags:
      - Order
  /order/{id}:
    get:
      consumes:
      - application/json
      description: Get Order By ID
      operationId: get_order_by_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OrderBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/order_service.Order'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Order By ID
      tags:
      - Order
  /user:
    get:
      consumes:
      - application/json
      description: Get User List
      operationId: get_user_list
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetAllUserResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/user_service.GetListUserResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get User List
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create User
      operationId: create_user
      parameters:
      - description: CreateUserRequestBody
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/user_service.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: GetUserBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/user_service.User'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create User
      tags:
      - User
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete User
      operationId: delete_user
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete User
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get User By ID
      operationId: get_user_by_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: UserBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/user_service.User'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get User By ID
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Patch User
      operationId: patch_user
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdatePatchRequestBody
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePatch'
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/user_service.User'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Patch User
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update User
      operationId: update_user
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateUserRequestBody
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/user_service.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/user_service.User'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update User
      tags:
      - User
swagger: "2.0"
